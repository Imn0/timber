cmake_minimum_required(VERSION 3.16)

include(version.cmake)

project(timber VERSION ${PROJECT_VERSION}
    DESCRIPTION "C logging library"
    LANGUAGES C)
set(soversion ${GIT_SOVERSION})

include(GNUInstallDirs)
if(MSVC)
    set(CMAKE_C_STANDARD 17)
else()
    set(CMAKE_C_STANDARD 23)
endif()
set(CMAKE_C_STANDARD_REQUIRED ON)
set(CMAKE_C_EXTENSIONS OFF)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

if(NOT DEFINED CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE "Release" CACHE STRING "Choose the type of build." FORCE)
endif()

option(BUILD_SHARED_LIBS "Build shared libraries, builds static when off, can be overwriten with BUILD_SHARED_AND_STATIC_LIBS" ON)
option(BUILD_SHARED_AND_STATIC_LIBS "Build both shared and static libraries" OFF)
option(BUILD_TESTS "Build tests" ON)
option(BUILD_EXAMPLES "Build examples" ON)
option(BUILD_PYTHON_BINDINGS "" OFF)
option(DEBUG_DEFINES "Enable developer build" OFF)
if(DEBUG_DEFINES)
    add_compile_definitions(TMB_DEBUG=1)
endif()

file(GLOB_RECURSE LIB_SOURCES "src/*.c" ${CMAKE_CURRENT_BINARY_DIR}/version.c)

function(setup_shared_lib)
    add_library(${PROJECT_NAME}-shared SHARED ${LIB_SOURCES})
    add_library(${PROJECT_NAME}::shared ALIAS ${PROJECT_NAME}-shared)

    set_target_properties(${PROJECT_NAME}-shared PROPERTIES
        VERSION ${PROJECT_VERSION}
        SOVERSION ${GIT_SOVERSION}
    )
    target_include_directories(${PROJECT_NAME}-shared
        PRIVATE
        ${CMAKE_CURRENT_SOURCE_DIR}/src
        PUBLIC
        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
        $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>
    )
    target_compile_options(${PROJECT_NAME}-shared PRIVATE
        $<$<OR:$<C_COMPILER_ID:Clang>,$<C_COMPILER_ID:AppleClang>,$<C_COMPILER_ID:GNU>>:
        -Wall -Wextra -pedantic -Wshadow -Werror -D_CRT_SECURE_NO_WARNINGS -fvisibility=hidden>
        $<$<C_COMPILER_ID:MSVC>:
        /W4 /D_CRT_SECURE_NO_WARNINGS /std:clatest>)
    target_compile_definitions(${PROJECT_NAME}-shared 
        PRIVATE TMB_BUILD_SHARED=1
        INTERFACE TMB_USING_SHARED=1
    )
    install(TARGETS ${PROJECT_NAME}-shared
        EXPORT ${PROJECT_NAME}Targets
        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
        RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
    )

endfunction(setup_shared_lib)

function(setup_static_lib)
    add_library(${PROJECT_NAME}-static STATIC ${LIB_SOURCES})
    add_library(${PROJECT_NAME}::static ALIAS ${PROJECT_NAME}-static)

    target_include_directories(${PROJECT_NAME}-static
        PRIVATE
        ${CMAKE_CURRENT_SOURCE_DIR}/src
        PUBLIC
        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
        $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>
    )
    target_compile_options(${PROJECT_NAME}-static PRIVATE
        $<$<OR:$<C_COMPILER_ID:Clang>,$<C_COMPILER_ID:AppleClang>,$<C_COMPILER_ID:GNU>>:
        -Wall -Wextra -pedantic -Wshadow -Werror -D_CRT_SECURE_NO_WARNINGS -fvisibility=hidden>
        $<$<C_COMPILER_ID:MSVC>:
        /W4 /D_CRT_SECURE_NO_WARNINGS /std:clatest>)

    if(WIN32)
        set_target_properties(${PROJECT_NAME}-static PROPERTIES
            OUTPUT_NAME ${PROJECT_NAME}_static
        )
    else()
        set_target_properties(${PROJECT_NAME}-static PROPERTIES
            OUTPUT_NAME ${PROJECT_NAME}
        )
    endif()
    target_compile_definitions(${PROJECT_NAME}-static 
        PRIVATE TMB_BUILD_STATIC=1
        INTERFACE TMB_USING_STATIC=1
    )
    install(TARGETS ${PROJECT_NAME}-static
        EXPORT ${PROJECT_NAME}Targets
        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
        RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
    )
endfunction(setup_static_lib)

add_custom_command(
    OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/version.c ${CMAKE_CURRENT_BINARY_DIR}/_version.c
    COMMAND ${CMAKE_COMMAND} -P ${CMAKE_CURRENT_SOURCE_DIR}/version.cmake
    DEPENDS FORCE_REBUILD_DUMMY
    VERBATIM
    COMMENT "Generating version.c"
)

add_custom_target(FORCE_REBUILD_DUMMY)

if(BUILD_SHARED_AND_STATIC_LIBS)
    setup_shared_lib()
    setup_static_lib()
    add_library(${PROJECT_NAME}::${PROJECT_NAME} ALIAS ${PROJECT_NAME}-shared)
elseif(BUILD_SHARED_LIBS)
    setup_shared_lib()
    add_library(${PROJECT_NAME}::${PROJECT_NAME} ALIAS ${PROJECT_NAME}-shared)
else()
    setup_static_lib()
    add_library(${PROJECT_NAME}::${PROJECT_NAME} ALIAS ${PROJECT_NAME}-static)
endif()


configure_file(
    ${CMAKE_CURRENT_SOURCE_DIR}/library_config/Config.cmake.in
    ${PROJECT_BINARY_DIR}/${PROJECT_NAME}Config.cmake @ONLY)
configure_file(
    ${CMAKE_CURRENT_SOURCE_DIR}/library_config/ConfigVersion.cmake.in
    ${PROJECT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake @ONLY)

install(FILES
    ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Config.cmake
    ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake
    DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}
)

configure_file(${CMAKE_CURRENT_SOURCE_DIR}/library_config/libtimber.pc.in
    ${CMAKE_CURRENT_BINARY_DIR}/libtimber.pc @ONLY)

install(FILES ${CMAKE_CURRENT_BINARY_DIR}/libtimber.pc
    DESTINATION ${CMAKE_INSTALL_LIBDIR}/pkgconfig)

install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/include/
    DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
    FILES_MATCHING PATTERN "*.h"
)
install(EXPORT ${PROJECT_NAME}Targets
    FILE ${PROJECT_NAME}Targets.cmake
    NAMESPACE ${PROJECT_NAME}::
    DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}
)

if(BUILD_TESTS)
    enable_testing()
endif()
add_subdirectory(tests)
add_subdirectory(examples)
